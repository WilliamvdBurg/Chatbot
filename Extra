curl -X POST -H "Content-Type: application/json" -d '{
  "recipient":{
    "phone_number":"(+31)654902460"
  },
  "message":{
    "attachment":{
      "type":"template",
      "payload":{
        "template_type":"button",
        "text":"Beste Tijmen van Dobbenburgh, je hebt nog een openstaande factuur met factuurnummer 2016829 (150,04 euro) bij Bol.com. Je kan deze factuur eenvoudig betalen via iDEAL",
        "buttons":[
          {
            "type":"web_url",
            "url":"https://mijnbeta.vrendly.nl/app/#/debitor-detail/payment/LHuVvWb4GE",
            "title":"Betaal"
          },
          {
            "type":"postback",
            "title":"Klacht indienen",
            "payload":"klacht indienen"
          }
        ]
      }
    }
  }
}' "https://graph.facebook.com/v2.6/me/messages?access_token=EAAH6aBRRwRIBAAztsST3yW36UMjwAXW18gx5jfDDHGL0fgzI9zja5TPBtUiVXIVS9zaZASfaSXOJCqb0ZBXzWQF1LUWiZBbcRXqcPTz1atCTvQFF4cvodOJ7dmlTJQMFIAsL1uxiJtFjasn4ls4Ex2WeZA3rPrRKmXhMcQf9IQZDZD"











  function startVragen(userInput)
  { var sender = event.sender.id;
      var recipient = sender;
      sessies[recipient].vragensessie = true;
      sessies[recipient].vraag = 0;
      authenticateCode(getAuthenticateCode(userInput))
              .then(function (accessToken) {
                  var decoded = jwt_decode(accessToken);
                  var evaluationId = decoded.evaluationId;
                  return getEvaluationData(evaluationId, accessToken);
              })
              .then(function (questionSet) {
                  console.log('askquetsions word aangeroepen')
                  askQuestion(questionSet[sessies[recipient].vraag], sender);
              })
              .catch(function (error) {
                  console.log(error);
              })
      }



  // code uit de text halen
  function getAuthenticateCode(userInput){
      console.log('code word opgevraagt');
      var woordenArray = ["code",':',"mijn","is"];
      for (var i = 0; i < woordenArray.length; i++){
          userInput = userInput.replace(woordenArray[i],'')
      }
      console.log('hier is de code', userInput);
      return userInput;
  }


  // code
  function getEvaluation(code) {
      console.log("yoooooooooooooooop")
      authenticateCode(code)
          .then(function (result) {
              var accessToken = result;
              console.log('access ontvangen')
              console.log(accessToken);
              var decoded = jwt_decode(accessToken);
              console.log(decoded);
              var evaluationId = decoded.evaluationId;
              return getEvaluationData(evaluationId, accessToken)
          }).then(function (result) {
          console.log(result);
          askQuestion(question, sender)
      })
  }
  // evaluren met code word gevraagd met die code. als het goed gaat krijg je Acces token terug. anders een error
  // bij terugkrijgen van de acces token word die ge returned.
  function authenticateCode(code) {
      return request({
          url: 'https://staging-api-portal.evalytics.nl/auth/code?code=' + code,
          method: 'POST'
      }).then(function (result) {
          var data = JSON.parse(result);
          return data.accessToken;
      }).catch(function (error) {
          console.log(error);
      })


  }
  // hierin word de assay aangevraagd zodat deze in het rest van de code gebruikt kan worden.  de token is een token die je terugkrijgt nadat je je eerste token meegeeft op de site van evalytics. deze code geeft je de vragen terug.
  function getEvaluationData(id, accessToken) {
      return request({
          url: 'https://staging-api-portal.evalytics.nl/evaluation/getDetails/' + id,
          qs: {access_token: token},
          method: 'GET',
          headers: {
              ['access-token']: accessToken
          }
      }).then(function (result) {
          var data = JSON.parse(result);
          var evaluation = data.results[0];

          var openQuestions = [];
          _.forEach(evaluation.blocks[0].questionSets, function (questionset) {
              questionSet = questionset.questions;
              console.log(questionSet);
          });

          return questionSet;
      }).catch(function (error) {
          console.log(error);
      });
  }

  // in deze functie worden de question soorten beschreven en verteld wat ze moeten uitvoeren.

  function askQuestion(question, sender) {
      var quickReplies = [];
      console.log('askquestions word afgehandeld')
      if (question.scale.input === 'rating') {
          var i = 1;
          _.times(question.scale.scaleNl.max, function (value) {
              quickReplies.push({
                  content_type: 'text',
                  title: i++,
                  payload: 'DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED'
              })
          });

          // 1 t/m 10 afhandeling

      } else if (question.scale.input === 'boolean') {

          quickReplies.push({
              content_type: 'text',
              title: scale.value,
              payload: 'DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED'

          })
          // Ja/nee afhandeling

      } else if (question.scale.input === 'text') {
          // Open vraag
          input.push
      }


      else {
          question.scale.scaleNl.forEach(function (scale) {
              quickReplies.push({
                  content_type: 'text',
                  title: scale.value,
                  payload: 'DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED'
              })
              // afhandeling de onbekende vragen.
          });
      }

      // quick_replies: [{
      //     content_type: 'text',
      //     title: '1',
      //     payload: 'DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED'
      // }, {
      //     content_type: 'text',
      //     title: '2',
      //     payload: 'DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED'
      // }]

      var messageData = {
          text: question.questionNl,
          quick_replies: quickReplies
      };

      console.log('aamessage', messageData);

      request({
          url: 'https://graph.facebook.com/v2.6/me/messages',
          qs: {access_token: token},
          method: 'POST',
          json: {
              recipient: {id: sender},
              message: messageData,
          }
      }, function (error, response, body) {
          if (error) {
              console.log('Error sending messages: ', error)
          } else if (response.body.error) {
              console.log('Error: ', response.body.error)
          }
      })
  }



  --------------------------------------------












  if (text == 'Start' ) {

    sessies[recipient].vragensessie = true;
    sessies[recipient].vraag = 0;
                sendTextMessage(sender, 'Vul u authenticatie code in om de test te starten', function (error, response, body) {
                    if (error) {
                        console.log('Error sending messages: ', error)
                    } else if (response.body.error) {
                        console.log('Error: ', response.body.error)
                        }
                        else {
                        authenticateCode('skp-855')
                                .then(function (accessToken) {
                                    var decoded = jwt_decode(accessToken);
                                    var evaluationId = decoded.evaluationId;
                                    return getEvaluationData(evaluationId, accessToken);
                                })
                                .then(function (questionSet) {
                                    askQuestion(questionSet[sessies[recipient].vraag], sender);
                                })
                                .catch(function (error) {
                                    console.log(error);
                                })
                        }
                })
            }





HOe werkt de code op de goede manier:

 if (text == 'Start' ) {

                 sendTextMessage(sender, 'skp-855', function (error, response, body) {


                     if (error) {
                        console.log('Error sending messages: ', error)
                    } else if (response.body.error) {
                        console.log('Error: ', response.body.error)
                    }waitForCode = true;
                     // code zal moeten worden opgehaald uit de getypte text

                })
            }
if(waitForCode) {
                waitForCode = false;
                console.log("code is getypt", text)
                startVragen(text);
}













// function startQuestions(){
//     getEvaluation()
//         .then(function(result)
//     {
//         getEvaluationData(id, accessToken)
//
//     }).catch(function(err) {
//         // catch any error that happened along the way
//         addTextToPage("Argh, broken: " + err.message);
//     }).then(function () {
//         askQuestion(question, sender)
//     }).catch(function(err) {
//         // catch any error that happened along the way
//         addTextToPage("Argh, broken2: " + err.message);
//     })
//
//
// }












 function sendGenericMessage(sender, callback) {
        messageData = {
            "text": "vraag 1: De docent toonde voldoende kennis over de lesstof.",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "1",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "2",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "3",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "4",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "5",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "6",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "7",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "8",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "9",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "10",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                }
            ]
        }


        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, callback)
    }

    function sendGeneric1Message(sender) {
        messageData = {
            "text": "Vraag 2: De docent legde de lesstof begrijpelijk uit.",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "1",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "2",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "3",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "4",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "5",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "6",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "7",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "8",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "9",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "10",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                }
            ]
        }


        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, function (error, response, body) {
            if (error) {
                console.log('Error sending messages: ', error)
            } else if (response.body.error) {
                console.log('Error: ', response.body.error)
            }
        })
    }

    function sendGeneric2Message(sender, callback) {
        messageData = {
            "text": "vraag 3: De docent gaf op een inspirerende en stimulerende manier les.",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "1",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "2",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "3",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "4",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "5",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "6",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "7",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "8",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "9",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "10",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                }
            ]
        }


        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, callback)
    }

    function sendGeneric3Message(sender, callback) {
        messageData = {
            "text": "vraag 4: In hoeverre heeft de docent bijgedragen aan het behalen van de omschreven leerdoelen?",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "Zeer weinig",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "Weinig",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "Neutraal",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "Veel",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "Zeer veel",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },

            ]
        }


        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, callback)
    }

    function sendGeneric4Message(sender, callback) {
        messageData = {
            "text": "vraag 5: In welke mate toonde de docent zich betrokken bij het leerproces van de studenten?",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "Zeer weinig",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "Weinig",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "Neutraal",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "Veel",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "Zeer veel",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
            ]
        }


        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, callback)
    }

    function sendGeneric5Message(sender, callback) {
        messageData = {
            "text": "vraag 6: De leerdoelen van deze module waren helder geformuleerd.",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "1",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "2",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "3",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "4",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "5",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "6",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "7",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "8",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "9",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "10",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                }
            ]
        }


        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, callback)
    }

    function sendGeneric6Message(sender, callback) {
        messageData = {
            "text": "vraag 7: De voor deze module vastgestelde leerdoelen heb ik behaald",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "1",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "2",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "3",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "4",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "5",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "6",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "7",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "8",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "9",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "10",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                }
            ]
        }


        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, callback)
    }

    function sendGeneric7Message(sender, callback) {
        messageData = {
            "text": "vraag 8: De module droeg bij aan de ontwikkeling van mijn vaardigheden",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "1",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "2",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "3",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "4",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "5",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "6",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "7",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "8",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                },
                {
                    "content_type": "text",
                    "title": "9",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "10",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                }
            ]
        }


        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, callback)
    }

    function sendGeneric8Message(sender, callback) {
        messageData = {
            "text": "vraag 9: De tijd die ik aan de module heb besteed komt overeen met het aantal studiepunten van de module",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "Eens",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_RED"
                },
                {
                    "content_type": "text",
                    "title": "Oneens",
                    "payload": "DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_GREEN"
                }
            ]
        }
        request({
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {access_token: token},
            method: 'POST',
            json: {
                recipient: {id: sender},
                message: messageData,
            }
        }, callback)
    }











// 'use strict'
//
// var express = require('express')
// var bodyParser = require('body-parser')
// var request = require('request')
//
// var Config = require('./config')
// var FB = require('./connectors/askQuestionfacebook')
// var Bot = require('./bot')
//
// var request = require('request');

//Lets try to make a HTTPS GET request to modulus.io's website.
//All we did here to make HTTPS call is changed the `http` to `https` in URL.
// request('https://modulus.io', function (error, response, body) {
//     //Check for error
//     if(error){
//         return console.log('Error:', error);
//     }
//
//     //Check f
//     // or right status code
//     if(response.statusCode !== 200){
//         return console.log('Inval' +
//             'id Status Code Returned:', response.statusCode);
//     }
//
//     //All is good. Print the body
//     console.log(body); // Show the HTML for the Modulus homepage.
//
// });
// LETS MAKE A SERVER!
// var app = express()
// app.set('port', (process.env.PORT) || 5000)
// // SPIN UP SERVER
// app.listen(app.get('port'), function () {
//     console.log('Running on port', app.get('port'))
//
// })
// // PARSE THE BODY
// app.use(bodyParser.json());


// index page
// app.get('/', function (req, res) {
//     res.send('hello world i am a chat bot')
// })
//
// // for facebook to verify
// app.get('/webhook/', function (req, res) {
//     console.log('read1')
//     if (req.query['hub.verify_token'] === Config.FB_VERIFY_TOKEN) {
//         res.send(req.query['hub.challenge'])
//     }
//     res.send('Error, wrong token')
// })
//
// //
//
// to send messages to facebook
// app.post('/webhook/', function (req, res) {
//     console.log('read')
//     var entry = FB.getMessageEntry(req.body)
//     IS THE ENTRY A VALID MESSAGE?
//     if (entry && entry.message) {
//         if (entry.message.attachments) {
//              NOT SMART ENOUGH FOR ATTACHMENTS YET
//             FB.newMessage(entry.sender.id, "That's interesting!")
//         } else {
//             SEND TO BOT FOR PROCESSING
//             Bot.read(entry.sender.id, entry.message.text, function (sender, reply) {
//                 FB.newMessage(sender, reply)
//             })
//         }
//     }
//
//     res.sendStatus(200)
// })
//










































// const token = "EAAH6aBRRwRIBAAztsST3yW36UMjwAXW18gx5jfDDHGL0fgzI9zja5TPBtUiVXIVS9zaZASfaSXOJCqb0ZBXzWQF1LUWiZBbcRXqcPTz1atCTvQFF4cvodOJ7dmlTJQMFIAsL1uxiJtFjasn4ls4Ex2WeZA3rPrRKmXhMcQf9IQZDZD"






// var express = require('express')
// var bodyParser = require('body-parser')
// var request = require('request')
// var app = express()
// var _ = require('lodash');
//
//
// app.set('port', (process.env.PORT || 5000))
//
// // Process application/x-www-form-urlencoded
// app.use(bodyParser.urlencoded({extended: false}))
//
// // Process application/json
// app.use(bodyParser.json())
//
// // Index route
// app.get('/', function (req, res) {
//     res.send('Hello world, I am a chat bot')
// })
//
// // for Facebook verification
// app.get('/webhook/', function (req, res) {
//     if (req.query['hub.verify_token'] === 'vrendly_bot_will') {
//         res.send(req.query['hub.challenge'])
//     }
//     res.send('Error, wrong token')
// })
//
// // Spin up the server
// app.listen(app.get('port'), function () {
//     console.log('running on port', app.get('port'))
// })
//
// //_.indexOf([1 ,2 , 1, 2], 2);
//
//
// app.post('/webhook/', function (req, res) {
//     messaging_events = req.body.entry[0].messaging
//     for (i = 0; i < messaging_events.length; i++) {
//         event = req.body.entry[0].messaging[i]
//         sender = event.sender.id
//         if (event.message && event.message.text) {
//             text = event.message.text
//             if (text === 'Generic') {
//                 sendGenericMessage(sender)
//                 continue
//             }
//             else if (text === 'Website') {
//                 sendWebsiteMessage(sender)
//                 continue
//             }
//             // else if(afsluitingen(text) == true) {
//             //     sendTextMessage(sender, 'tot ziens, dankuwel voor het chatten');
//             //     continue
//             // }
//             else if (text.toString() === ('doei' || 'Doei' || 'dag' || 'Dag' || 'Bye' || 'bye' || 'doeg' || 'Doeg' || 'Totziens' || 'totziens')) {
//                 sendTextMessage(sender, ' Hello! Im BotVrendly, how can i help you?');
//                 continue
//             }
//             else if (text.toString() === ('doei' || 'Doei' || 'dag' || 'Dag' || 'Bye' || 'bye' || 'doeg' || 'Doeg' || 'Totziens' || 'totziens')) {
//                 sendTextMessage(sender, "Thank you, have a nice day!!");
//                 continue
//             }
//             else if (text === 'help') {
//                 sendTextMessage(sender, '-Website\n-Generic\n-hi\n-doei');
//                 continue
//             }
//             sendTextMessage(sender, "Ik ben nog niet zo slim!: " + text.substring(0, 200))
//         }
//         if (event.postback) {
//             text = JSON.stringify(event.postback)
//             sendTextMessage(sender, "Postback received: " + text.substring(0, 200), token)
//             continue
//         }
//     }
//     res.sendStatus(200)
// })
//
//
// var token = "EAAH6aBRRwRIBAAztsST3yW36UMjwAXW18gx5jfDDHGL0fgzI9zja5TPBtUiVXIVS9zaZASfaSXOJCqb0ZBXzWQF1LUWiZBbcRXqcPTz1atCTvQFF4cvodOJ7dmlTJQMFIAsL1uxiJtFjasn4ls4Ex2WeZA3rPrRKmXhMcQf9IQZDZD"
//
//
// function sendTextMessage(sender, text) {
//     messageData = {
//         text: text
//     }
//     request({
//         url: 'https://graph.facebook.com/v2.6/me/messages',
//         qs: {access_token: token},
//         method: 'POST',
//         json: {
//             recipient: {id: sender},
//             message: messageData,
//         }
//     }, function (error, response, body) {
//         if (error) {
//             console.log('Error sending messages: ', error)
//         } else if (response.body.error) {
//             console.log('Error: ', response.body.error)
//         }
//     })
// }
//
//
// function sendGenericMessage(sender) {
//     messageData = {
//         "attachment": {
//             "type": "template",
//             "payload": {
//                 "template_type": "generic",
//                 "elements": [{
//                     "title": "First card",
//                     "subtitle": "Element #1 of an hscroll",
//                     "image_url": "http://messengerdemo.parseapp.com/img/rift.png",
//                     "buttons": [{
//                         "type": "web_url",
//                         "url": "https://www.oculus.com/",
//                         "title": "web url"
//                     }, {
//                         "type": "postback",
//                         "title": "Postback",
//                         "payload": "Payload for first element in a generic bubble",
//                     }],
//                 }, {
//                     "title": "Second card",
//                     "subtitle": "Element #2 of an hscroll",
//                     "image_url": "http://messengerdemo.parseapp.com/img/gearvr.png",
//                     "buttons": [{
//                         "type": "postback",
//                         "title": "Postback",
//                         "payload": "Payload for second element in a generic bubble",
//                     }],
//                 }]
//             }
//         }
//     }
//     request({
//         url: 'https://graph.facebook.com/v2.6/me/messages',
//         qs: {access_token: token},
//         method: 'POST',
//         json: {
//             recipient: {id: sender},
//             message: messageData,
//         }
//     }, function (error, response, body) {
//         if (error) {
//             console.log('Error sending messages: ', error)
//         } else if (response.body.error) {
//             console.log('Error: ', response.body.error)
//         }
//     })
//
// }
//
//
// function sendWebsiteMessage(sender) {
//     messageData = {
//         "attachment": {
//             "type": "template",
//             "payload": {
//                 "template_type": "generic",
//                 "elements": [{
//                     "title": "Evalytics",
//                     "subtitle": "site van eva",
//                     "image_url": "https://www.surf.nl/binaries/article/content/gallery/surf/nieuws/evalytics-forbidden-fruit.png",
//                     "buttons": [{
//                         "type": "web_url",
//                         "url": "http://www.evalytics.nl/",
//                         "title": "web url"
//                     }, {
//                         "type": "postback",
//                         "title": "Postback",
//                         "payload": "Payload for first element in a generic bubble",
//                     }],
//                 },
//                     {
//                         "title": "Vrendly",
//                         "subtitle": "site van vrendly",
//                         "image_url": "https://beta.vrendly.nl/app/images/vrendly-logo-w200px.svg",
//                         "buttons": [{
//                             "type": "web_url",
//                             "url": "https://beta.vrendly.nl/app/#/login",
//                             "title": "web url"
//                         }, {
//                             "type": "postback",
//                             "title": "Postback",
//                             "payload": "Payload for second element in a generic bubble",
//                         }],
//                     }]
//             }
//         }
//     }
//     request({
//         url: 'https://graph.facebook.com/v2.6/me/messages',
//         qs: {access_token: token},
//         method: 'POST',
//         json: {
//             recipient: {id: sender},
//             message: messageData,
//         }
//     }, function (error, response, body) {
//         if (error) {
//             console.log('Error sending messages: ', error)
//         } else if (response.body.error) {
//             console.log('Error: ', response.body.error)
//         }
//     })
//
// }
//
//
//
//
//
//
//
//
//
